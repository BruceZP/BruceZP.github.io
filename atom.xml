<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frog Croaks</title>
  <subtitle>蛙鸣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-15T08:43:14.459Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bruce Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/01/15/Gardens%20by%20the%20bay/"/>
    <id>http://yoursite.com/2017/01/15/Gardens by the bay/</id>
    <published>2017-01-14T16:00:00.000Z</published>
    <updated>2017-01-15T08:43:14.459Z</updated>
    
    <content type="html"><![CDATA[<p>Gardens by the bay</p>
<p>美好的周末，美丽的心情。整理了前些日子在Gardens by the bay拍的照片，放上来，测试一下七牛图床的使用，也检验一下周末学习Lightroom两个小时的成果。估计以后这个博客也会成为我晒摄影作品的地盘吧，真的是要把这个空间变成一道大杂烩了。不过，我喜欢这样，那又怎样呢？</p>
<p>这次是同课题组的同事们一起出来玩儿的，一起度过了一个美好的下午。</p>
<p>第一张图是在进入花园的桥上拍摄的，可以看到远处的冷室，也是观光的重点。</p>
<p><img src="http://oc5olpjf3.bkt.clouddn.com/IMG_20161225_144843.jpg" alt="Gardens by the bay"></p>
<p>做为多肉控，一定要好好的欣赏冷室中的大爱多肉们。</p>
<p><img src="http://oc5olpjf3.bkt.clouddn.com/IMG_20161225_151646.jpg" alt="大爱多肉"></p>
<p><img src="http://oc5olpjf3.bkt.clouddn.com/IMG_20161225_151754.jpg" alt="大爱多肉"></p>
<p>看到这美丽的特玉莲，就想起了之前在实验室窗外失窃的那株我最得意的多肉，现在还很“肉疼”。</p>
<p><img src="http://oc5olpjf3.bkt.clouddn.com/IMG_20161225_152740.jpg" alt="特玉莲"></p>
<p>进入二号冷室，收获的就是强大的冲击力，满眼的绿混着水雾，如临仙境。</p>
<p><img src="http://oc5olpjf3.bkt.clouddn.com/IMG_20161225_160139.jpg" alt="绿色仙境"></p>
<p>一路登顶，看到新奇的猪笼草，然后慢慢的走下来，一点点地感受着。</p>
<p><img src="http://oc5olpjf3.bkt.clouddn.com/IMG_20161225_162645.jpg" alt="峰顶奇观"></p>
<p>所有的照片都是由新购一加3t拍摄，Lightroom后期处理，自我感觉还算良好。看来我是要慢慢爱上摄影了，活到老，学到老大概是因为学习是很有趣的事情吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gardens by the bay&lt;/p&gt;
&lt;p&gt;美好的周末，美丽的心情。整理了前些日子在Gardens by the bay拍的照片，放上来，测试一下七牛图床的使用，也检验一下周末学习Lightroom两个小时的成果。估计以后这个博客也会成为我晒摄影作品的地盘吧，真的是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>李笑来老师读书经验谈</title>
    <link href="http://yoursite.com/2016/10/06/%E6%9D%8E%E7%AC%91%E6%9D%A5%E8%80%81%E5%B8%88%E8%AF%BB%E4%B9%A6%E7%BB%8F%E9%AA%8C%E8%B0%88/"/>
    <id>http://yoursite.com/2016/10/06/李笑来老师读书经验谈/</id>
    <published>2016-10-05T16:00:00.000Z</published>
    <updated>2016-10-06T07:24:07.169Z</updated>
    
    <content type="html"><![CDATA[<p>参加了李笑来老师关于自己读书经验的知乎live。这场live让我最为受益的一个观点是：<strong>对于好书，要只字不差的反复阅读</strong>。</p>
<h3 id="李笑来老师读书的几个境界"><a href="#李笑来老师读书的几个境界" class="headerlink" title="李笑来老师读书的几个境界"></a>李笑来老师读书的几个境界</h3><ol>
<li><p>第一个境界应该是漫无目的的读书，大量的阅读可以让你交到意外的好运。</p>
</li>
<li><p>挑书是一种能力，需要慢慢习得，所以要别人的书单会渐渐退化这样的能力。</p>
<p>两个基本价值观：认清现实，思考未来；“<strong>有繁殖能力的知识</strong>”。</p>
</li>
<li><p>学术论文，是提高阅读理解能力的有效手段。</p>
</li>
<li><p>检索阅读： 有目标的阅读。自己建立一座图书馆，建立自己的知识体系。</p>
</li>
<li><p>再次大量阅读</p>
</li>
</ol>
<p>从全盘接受，到部分接受，到不能接受的部分也多想想……</p>
<h3 id="阅读的目的"><a href="#阅读的目的" class="headerlink" title="阅读的目的"></a>阅读的目的</h3><p>改变生活</p>
<h3 id="升级自己的阅读操作系统"><a href="#升级自己的阅读操作系统" class="headerlink" title="升级自己的阅读操作系统"></a>升级自己的阅读操作系统</h3><h5 id="不仅要只字不差地读，还要反复地读。"><a href="#不仅要只字不差地读，还要反复地读。" class="headerlink" title="不仅要只字不差地读，还要反复地读。"></a>不仅要只字不差地读，还要反复地读。</h5><p>学习能力专业，就什么事情都能学的比较专业。</p>
<p>递归结构的书籍（书中前面的理解是基于对后面的知识的理解）。所以，很多书籍需要反复的去读。</p>
<p>如果一本书读不懂也要硬着头皮读完，也要反复读，这样才能做有悟性的人。</p>
<p>学而不用则全白费</p>
<p>读书也是一个社交的活动</p>
<h5 id="提高阅读理解能力的最有效工具-——-写作"><a href="#提高阅读理解能力的最有效工具-——-写作" class="headerlink" title="提高阅读理解能力的最有效工具 —— 写作"></a>提高阅读理解能力的最有效工具 —— 写作</h5><p>像作者一样阅读。  // 教是最好的学习方法</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>碎片阅读没有用</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参加了李笑来老师关于自己读书经验的知乎live。这场live让我最为受益的一个观点是：&lt;strong&gt;对于好书，要只字不差的反复阅读&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;李笑来老师读书的几个境界&quot;&gt;&lt;a href=&quot;#李笑来老师读书的几个境界&quot; class=&quot;hea
    
    </summary>
    
    
      <category term="书" scheme="http://yoursite.com/tags/%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python 3.4 Programming Tutorials——Notes</title>
    <link href="http://yoursite.com/2016/09/28/Python%203.4%20Programming%20Tutorials%E2%80%94%E2%80%94Notes/"/>
    <id>http://yoursite.com/2016/09/28/Python 3.4 Programming Tutorials——Notes/</id>
    <published>2016-09-27T16:00:00.000Z</published>
    <updated>2016-10-06T08:03:06.015Z</updated>
    
    <content type="html"><![CDATA[<p>在Youtube上找到了这个Python3的教程：<a href="https://www.youtube.com/playlist?list=PL6gx4Cwl9DGAcbMi1sH6oAMk4JHw91mC_" target="_blank" rel="external">Python 3.4 Programming Tutorials</a>。讲课的这哥们很逗，每个视频的长度也都控制在10分钟之内，十分适合用作入门的选择，学习过程不会太枯燥。但是这种教程的缺点也是很明显的：逻辑性不强，不够深入。鉴于学习这个课程所需要的时间投入比较小，学习的<strong>性价比较高</strong>，推荐学习。我将学习过程中的一些代码跟着敲下来，便于记忆，通过看代码就能够想起来课程中讲的内容。</p>
<h4 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">FunctionName</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">	the body of the function</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bitcoin_to_usd</span><span class="params">(btc)</span>:</span></div><div class="line">	amount = btc * <span class="number">527</span></div><div class="line">	<span class="keyword">print</span> (amount)</div></pre></td></tr></table></figure>
<p>return values</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_dating_age</span><span class="params">(my_age)</span>:</span></div><div class="line">    grils_age = my+age/<span class="number">2</span> + <span class="number">7</span></div><div class="line">    <span class="keyword">return</span> girls_age</div><div class="line"></div><div class="line">n = allowed_dating_age(<span class="number">28</span>) <span class="comment">#the retured data is stored in n</span></div></pre></td></tr></table></figure>
<p>Default values for arguments</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gender</span><span class="params">(sex = <span class="string">"unknown"</span>)</span>:</span> <span class="comment"># the sex ="unknow claim the default value"</span></div><div class="line">    If sex <span class="keyword">is</span> <span class="string">"m"</span>:</div><div class="line">        sex = <span class="string">"male"</span></div><div class="line">    <span class="keyword">elif</span> sex <span class="keyword">is</span> <span class="string">"f"</span>:</div><div class="line">        sex = <span class="string">"female"</span></div><div class="line">    print(sex)</div></pre></td></tr></table></figure>
<h6 id="Variable-scope-important"><a href="#Variable-scope-important" class="headerlink" title="Variable scope  #important"></a>Variable scope  #important</h6><p>if the variable is out and up of the function, the function can access the variable. variable in a function could only be used by itself.</p>
<p>the order of the variables of the function could be changed by using the key words.</p>
<h6 id="Flexible-number-of-arguments"><a href="#Flexible-number-of-arguments" class="headerlink" title="Flexible number of arguments"></a>Flexible number of arguments</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_numbers</span><span class="params">(*args)</span>:</span></div><div class="line">    total = <span class="number">0</span> </div><div class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> args:</div><div class="line">        total += a </div><div class="line">    print(total)</div></pre></td></tr></table></figure>
<h6 id="Unpack-arguments"><a href="#Unpack-arguments" class="headerlink" title="Unpack arguments"></a>Unpack arguments</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">health_calculator</span><span class="params">(age, apples_ate, cig_smoked)</span>:</span></div><div class="line">	answer = (<span class="number">100</span>-age) + (apples_age * <span class="number">3.5</span>) - (cigs_smoked * <span class="number">2</span>)</div><div class="line">	print(answer)</div><div class="line">bruce_data = [<span class="number">27</span>, <span class="number">20</span>, <span class="number">0</span>]</div><div class="line">heath_calculator(*burce_data)  <span class="comment"># upacke a arguments</span></div></pre></td></tr></table></figure>
<h3 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h3><p>use with { }  and no repeated items in set will be regarded as one item</p>
<h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><p>use with</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Dic &#123; key1:value1, key2:value2&#125;</div><div class="line">print(Dic[key1])</div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> Dic.items():</div><div class="line">	<span class="keyword">print</span> (k + v)</div></pre></td></tr></table></figure>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>functions in another file</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># in file 1 with filename: file1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fish</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'I am tuna'</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment"># in file 2 with filename: main</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> file1</div><div class="line">file1.tuna <span class="comment"># this is how you use the function in file1</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># how to download a image</span></div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_web_image</span><span class="params">(url)</span>:</span></div><div class="line">    name = random.randrange(<span class="number">1</span>, <span class="number">1000</span>)</div><div class="line">    full_name = str(name) + <span class="string">".jpg"</span></div><div class="line">    urllib.request.urlretrieve(url, full_name)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># how to read or wirte file</span></div><div class="line"></div><div class="line">fw = open(<span class="string">"sample.txt"</span>, <span class="string">'w'</span>) <span class="comment"># w means ready to writhe to it</span></div><div class="line">fw.write(<span class="string">"Wirtign something\n"</span>)</div><div class="line">fw.write(<span class="string">"I like bacon\n"</span>)</div><div class="line">fw.close()</div><div class="line"></div><div class="line"><span class="comment"># how to read</span></div><div class="line">fr = open(<span class="string">"samle.txt"</span>, <span class="string">"r"</span>) <span class="comment"># just read data from it</span></div><div class="line">text = fr.read()</div><div class="line">print(text)</div><div class="line">fr.close()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Download files from web</span></div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request <span class="comment">#another way to import modules</span></div><div class="line">goog_rul = <span class="string">"http://xxxx"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_stock_data</span><span class="params">(csv_url)</span>:</span></div><div class="line">    response = request.urlopen(csv_rul)</div><div class="line">    csv = response.read()</div><div class="line">    csv_str = str(csv)</div><div class="line">    lines = csv_str.split(<span class="string">"\\n"</span>)</div><div class="line">    dest_url = <span class="string">r"goog.csv"</span> <span class="comment"># work with file directr use r</span></div><div class="line">    fx = opne(dest_url, <span class="string">"w"</span>)</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">        fx.write(line + <span class="string">"\n"</span>)</div><div class="line">	fx.close()</div><div class="line">    </div><div class="line">download_stock_data(goog_url)</div></pre></td></tr></table></figure>
<h3 id="Web-Crawler"><a href="#Web-Crawler" class="headerlink" title="Web Crawler"></a>Web Crawler</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade_spider</span><span class="params">(max_pages)</span>:</span></div><div class="line">    page = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> page &lt;= max_pages:</div><div class="line">        url = <span class="string">"http://xxx"</span> + str(page) <span class="comment">#url change every single time</span></div><div class="line">        source_code = requests.get(url)</div><div class="line">        plain_text = source_code.text</div><div class="line">        soup = BeautifulSoup(plain_text)</div><div class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> soup.findAll(<span class="string">"a"</span>, &#123;<span class="string">"class"</span>:<span class="string">"item-name"</span>&#125;):</div><div class="line">            href = link.get(<span class="string">"href"</span>)</div><div class="line">            title = link.string</div><div class="line">            print(href)</div><div class="line">            print(title)</div><div class="line">            get_single_item_data(href)  <span class="comment"># dymaticaly</span></div><div class="line">        page += <span class="number">1</span></div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_single_item_data</span><span class="params">(item_url)</span>:</span></div><div class="line">    source_code = requests.get(url)</div><div class="line">    plain_text = source_code.text</div><div class="line">    soup = BeautifulSoup(plain_text)</div><div class="line">    <span class="keyword">for</span> item_name <span class="keyword">in</span> soup.findAll(<span class="string">"div"</span>, &#123;<span class="string">'class'</span>:<span class="string">"i-name"</span>&#125;):</div><div class="line">        print(item_name.string)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> soup.findAll(<span class="string">"a"</span>):</div><div class="line">        href = link.get(<span class="string">"href"</span>)</div><div class="line">        print(href)</div><div class="line">        </div><div class="line">trade_spider(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">tuna = int(input(<span class="string">"what's your fav number?\n"</span>)) <span class="comment"># others may not cooperate</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        number = int(input(<span class="string">"what's your fav number?\n"</span>))</div><div class="line">        print(<span class="number">18</span>/number)</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        print(<span class="string">"Make sure and enter a number"</span>)</div><div class="line">    <span class="keyword">except</span> ZeroDivisionError:</div><div class="line">        pritn(<span class="string">'Don'</span>t pick zero)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">finally</span>: <span class="comment"># this will run no matter what</span></div><div class="line">        print(<span class="string">"loop complete"</span>)</div></pre></td></tr></table></figure>
<h3 id="Classes-and-objects"><a href="#Classes-and-objects" class="headerlink" title="Classes and objects"></a>Classes and objects</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Enemy</span>:</span></div><div class="line">    life = <span class="number">3</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"ouch"</span>)</div><div class="line">        self.life -= <span class="number">1</span></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checklife</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.life &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'I am dead'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(str(self.life)+ <span class="string">'life left'</span></div><div class="line">             </div><div class="line">enemy1 = Enemy() <span class="comment"># object from Enemy class</span></div><div class="line">enemy2 = Enemy() <span class="comment"># this is another $$independent$$ object</span></div><div class="line">eneme1.attack()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>:</span></div><div class="line">    gender = <span class="string">'female'</span>  <span class="comment"># instant variable</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__inti__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name <span class="comment"># class variablein</span></div></pre></td></tr></table></figure>
<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>     <span class="comment"># this inti function will be called whenever you creat a object from this class</span></div><div class="line">        print(<span class="string">'Birasdf'</span>)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'I am swiming'</span>)</div><div class="line">        </div><div class="line">filipper = Tuna()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Enemy</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.energy =x</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_nerngy</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.energy)</div><div class="line">        </div><div class="line">jason = energy(<span class="number">5</span>)  <span class="comment"># this 5 energy will put to the init function and give the energy</span></div><div class="line">sandy = Enemy(<span class="number">18</span>)</div></pre></td></tr></table></figure>
<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_last_name</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Roberts'</span>)</div><div class="line">        </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Parent)</span>:</span>   <span class="comment"># pass all the things from Parent to this child class</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_first_name</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Bucky'</span>)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_last_name</span><span class="params">(self)</span>:</span>   <span class="comment"># this function will overwrite the fucntion (smame name) </span></div><div class="line">        print(<span class="string">'Snitasdf'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mario</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'I am moving'</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shroom</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat_shroom</span><span class="params">(self)</span>:</span></div><div class="line">        pirnt(<span class="string">'Now I am big'</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigMario</span><span class="params">(Mario, Shroom)</span>:</span> <span class="comment"># inheritance from multiple parents</span></div><div class="line">    <span class="keyword">pass</span>                       <span class="comment"># need line no meaning</span></div><div class="line"></div><div class="line">bm = BigMario()</div><div class="line">bm.move()</div><div class="line">bm.eat_shroom()</div></pre></td></tr></table></figure>
<h3 id="Threading"><a href="#Threading" class="headerlink" title="Threading"></a>Threading</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrucesMessenger</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> _ inrange(<span class="number">10</span>): <span class="comment"># loop ten tiems no need to care about the variable</span></div><div class="line">            print(threading.currentThread().getnName())</div><div class="line">x = BrucesMessenger(name=<span class="string">"send out messages"</span>)</div><div class="line">y = BrucesMessenger(name=<span class="string">"receive messages"</span>)</div><div class="line">x.start()   <span class="comment"># go to the class to "run" function</span></div><div class="line">y.start()</div></pre></td></tr></table></figure>
<h3 id="Unpack-list-or-tuples"><a href="#Unpack-list-or-tuples" class="headerlink" title="Unpack list or tuples"></a>Unpack list or tuples</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data, item, price = [<span class="string">"december 23, 2015"</span>, <span class="string">'Bread G'</span>, <span class="number">8.23</span>] <span class="comment"># the nmubers of variables should equale</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_first_last</span><span class="params">(grades)</span>:</span></div><div class="line">    first, *middle, last = grades <span class="comment"># *middle takes all the grades in the middle</span></div><div class="line">    avg =sum(middle) / len(middle)</div><div class="line">    print(avg)</div></pre></td></tr></table></figure>
<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">first = [<span class="string">"Bucky"</span>, <span class="string">'Tom'</span>, [Taylor]</div><div class="line">last = [<span class="string">'Roberts'</span>, <span class="string">'Hanks'</span>, <span class="string">'Swift'</span>]</div><div class="line">names = zip(first, last) <span class="comment"># make a list of tuples</span></div><div class="line">         				<span class="comment"># [('Bucky', 'roberts'), ]</span></div><div class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> names:</div><div class="line">         pring(a, b)</div></pre></td></tr></table></figure>
<h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">answer = <span class="keyword">lambda</span> x: x*<span class="number">7</span>  <span class="comment"># lambda is a samll simple function used once without name</span></div><div class="line">print(answer(<span class="number">5</span>))</div></pre></td></tr></table></figure>
<h3 id="Mim-Max-Sorting-dictionary"><a href="#Mim-Max-Sorting-dictionary" class="headerlink" title="Mim, Max, Sorting dictionary"></a>Mim, Max, Sorting dictionary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Imgae.open(<span class="string">"bucky.jpg"</span>)</div><div class="line">print(imge.size) <span class="comment"># image.format</span></div><div class="line">imge.show()  <span class="comment">#go to the default img processor</span></div><div class="line"></div><div class="line"><span class="comment"># croping</span></div><div class="line">area= (<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">375</span>) <span class="comment"># the starting/stoping point of the crop</span></div><div class="line">croped_img = img.crop(area)</div><div class="line">croped_img.show()</div><div class="line"></div><div class="line"><span class="comment"># combine images together</span></div><div class="line">sister = Image.open(<span class="string">'sister.jpg'</span>)</div><div class="line">girl = Image.open(<span class="string">'girl.png'</span>)</div><div class="line"></div><div class="line">area = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>)   <span class="comment">#critical to the size of the images</span></div><div class="line">sister.paste(girl, area) <span class="comment">#paste girl on sister</span></div><div class="line"></div><div class="line"><span class="comment"># Get individual channeals</span></div><div class="line">print(sister.mode) <span class="comment"># RGB or others</span></div><div class="line">r, g, b = sister.split() <span class="comment">#stored in three variables</span></div><div class="line">r.show() <span class="comment"># with show the red channeal</span></div><div class="line"></div><div class="line"><span class="comment"># Merge</span></div><div class="line">new_img = Image.merge(<span class="string">'RGB'</span>, (r, g, b)) <span class="comment">#this could control the quancequence of the channeals, change images. Can also combine channeals from different images</span></div><div class="line">new_img.show</div><div class="line"></div><div class="line"><span class="comment"># Transforming images such as resize...</span></div><div class="line">baby = Image.open(<span class="string">'baby.jpg'</span>)</div><div class="line">squre_baby = baby.resize((<span class="number">250</span>, <span class="number">250</span>)) <span class="comment"># resize </span></div><div class="line">flip_bay = baby.transpose(Image.FLIP_LEFT_RIGHT) <span class="comment">#flip images</span></div><div class="line">spin_baby = baby.transpose(Image.ROTATE_90)</div><div class="line"></div><div class="line"><span class="comment"># Convert image mode</span></div><div class="line">black_white = baby.convert(<span class="string">"L"</span>) <span class="comment"># CMKY also works</span></div><div class="line">blur = sisster.filter(IMageFilter.BLUR) <span class="comment"># add filter</span></div><div class="line">detail = sister.filter(ImageFilter.DETAIL) <span class="comment"># also FIND_EDGES and some oathers</span></div></pre></td></tr></table></figure>
<h3 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment">#store as bytes data</span></div><div class="line">packed_data = pack(<span class="string">'iif'</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">4.73</span>) <span class="comment"># i for int f for float</span></div><div class="line">print(packed_data)</div><div class="line"></div><div class="line">print(calcsize(<span class="string">'i'</span>)) <span class="comment"># size of an int is 4 bytes</span></div><div class="line">print(calcsize(<span class="string">'f'</span>))</div><div class="line"></div><div class="line"><span class="comment">#to get data back to normal</span></div><div class="line">origianl_data = unpack(<span class="string">'iif'</span>, packed_data)</div></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">income =[<span class="number">10</span>, <span class="number">30</span>, <span class="number">75</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_money</span><span class="params">(dollars)</span>:</span></div><div class="line">    <span class="keyword">return</span> dollars*<span class="number">2</span></div><div class="line">new_income = list(map(double_money, income)) <span class="comment"># use everything in income to go double_money</span></div></pre></td></tr></table></figure>
<h3 id="Bitwise-operator"><a href="#Bitwise-operator" class="headerlink" title="Bitwise operator"></a>Bitwise operator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">50</span>    <span class="comment">#110010</span></div><div class="line">b = <span class="number">25</span>    <span class="comment">#011001</span></div><div class="line">c = a &amp; b <span class="comment">#010000 </span></div><div class="line"></div><div class="line">x =<span class="number">240</span>    <span class="comment">#11110000</span></div><div class="line">y = x &gt;&gt; <span class="number">2</span><span class="comment">#00111100   right shift the bitwise</span></div></pre></td></tr></table></figure>
<h3 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> heapq</div><div class="line"></div><div class="line">grade = [<span class="number">32</span>, <span class="number">234</span>,<span class="number">4234</span>,<span class="number">2342</span>,<span class="number">34</span>]</div><div class="line"><span class="keyword">print</span> (heapq.nlargest(<span class="number">3</span>, grades)) <span class="comment"># 3 bigiest numbers in grades</span></div><div class="line"></div><div class="line">stocks = [</div><div class="line">  &#123;asdf  asdfasdf&#125;</div><div class="line">]</div><div class="line"></div><div class="line">print(heapq.nsmallest(<span class="number">2</span>, stocks, key=<span class="keyword">lambda</span> stock: stock[<span class="string">'price'</span>])</div></pre></td></tr></table></figure>
<h3 id="Find-most-frequent-items"><a href="#Find-most-frequent-items" class="headerlink" title="Find most frequent items"></a>Find most frequent items</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">words = text.split() <span class="comment"># string into list of words</span></div><div class="line">counter = Counter(words)</div><div class="line">top_three = counter.most_common(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="Multiple-key-sorting"><a href="#Multiple-key-sorting" class="headerlink" title="Multiple key sorting"></a>Multiple key sorting</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itmegetter</div><div class="line">users = [] <span class="comment"># this is a dic</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> sorted(users, key=intemgetter(<span class="string">'fname'</span>)) <span class="comment"># fname is one key in users</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> sorted(users, key=itermgetter(<span class="string">'fname'</span>, <span class="string">'lname'</span>) <span class="comment"># first sort by fname then lname!!</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> attrgetter</div><div class="line"></div><div class="line">clss User:</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__inti__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.name = x</div><div class="line">        self.user_id = y</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span>    </div><div class="line">        <span class="keyword">return</span> self.name + <span class="string">':'</span> str(self.user_id)</div><div class="line">    </div><div class="line">users = [ ] <span class="comment"># as a dic</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">    print(user)      <span class="comment"># this will call __repr__　　function</span></div><div class="line">    </div><div class="line">    </div><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> sorted(users, key=sttrgetter(<span class="string">'name'</span>)):</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Youtube上找到了这个Python3的教程：&lt;a href=&quot;https://www.youtube.com/playlist?list=PL6gx4Cwl9DGAcbMi1sH6oAMk4JHw91mC_&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
      <category term="学，Python" scheme="http://yoursite.com/tags/%E5%AD%A6%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>读《新生——七年就是一辈子》之开卷的思考</title>
    <link href="http://yoursite.com/2016/08/27/%E8%AF%BB%E3%80%8A%E6%96%B0%E7%94%9F%E2%80%94%E2%80%94%E4%B8%83%E5%B9%B4%E5%B0%B1%E6%98%AF%E4%B8%80%E8%BE%88%E5%AD%90%E3%80%8B%E4%B9%8B%E5%BC%80%E5%8D%B7%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2016/08/27/读《新生——七年就是一辈子》之开卷的思考/</id>
    <published>2016-08-27T11:40:06.000Z</published>
    <updated>2016-08-27T15:43:43.096Z</updated>
    
    <content type="html"><![CDATA[<p>今天无意间在Youtube上看到了李笑来老师的演讲，关于他的新著《<a href="http://b.xinshengdaxue.com/" target="_blank" rel="external">新生——七年就是一辈子</a>》。之前就拜读过李笑来老师的《把时间当做朋友》，受益匪浅。但由于时间的仓促， 当时并没有认真的做好读书的笔记。即使在读的过程中产生了很多共鸣，但现在记下来的并不多（我应该还是会再看几遍的）。因此，在读这本新作的时候，我希望可以将自己的心得记录在此，用文字来督促自己思考。</p>
<p>书名：《新生——七年就是一辈子》。</p>
<h3 id="何为新生（重生）？"><a href="#何为新生（重生）？" class="headerlink" title="何为新生（重生）？"></a>何为新生（重生）？</h3><blockquote>
<p>掌握任何一项新的重要技能，都相当于重生。</p>
</blockquote>
<h3 id="为什么七年就是一辈子？"><a href="#为什么七年就是一辈子？" class="headerlink" title="为什么七年就是一辈子？"></a>为什么七年就是一辈子？</h3><p>没有人规定，人的一生就只能够专注于一件事情。这里，我联想到大冰老师一直想要传达的一种精神，人的一辈子有多种可能性，一味地流浪同一味地朝九晚五没有什么区别。跳开现在的自己，尝试新的角色，你可能会开启生命中另一扇通往自由的大门。这一点上，我是很有共鸣的，也在践行着让生活变得多彩的信念。我想，能够在有限的生命中活出尽可能多的人生才算是不枉此生吧。</p>
<p>但是我们也不必要拘泥于“七年”就是一辈子。对于李笑来老师，七年也许是他为完成一项事业而走过学习、寻路、专注、收获、休息过程的一个周期。但对于存在着差异的每一个人，这样的周期并不一定合适。我们应该去了解自己，做到掌控着自己的每“一辈子”，要让“每一个自己”同样的精彩。</p>
<p>需要警醒的是，不应该让”一辈子”的概念成为逃避现实或茫然寻找人生出路的借口。</p>
<h3 id="怎样多活一辈子？"><a href="#怎样多活一辈子？" class="headerlink" title="怎样多活一辈子？"></a>怎样多活一辈子？</h3><p>李笑来老师告诉我们的方法很简单，那就是<strong>学习</strong>。</p>
<blockquote>
<p>学习新技能、走入新领域，循环往复。</p>
</blockquote>
<p>既然要学习，那就要知道学习的方法，这也是李笑来老师想要在这本书中告诉我们的事情，他关于升级概念与方法论的理解。</p>
<p>作为路人甲的你我，做好自寻出路的准备了吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天无意间在Youtube上看到了李笑来老师的演讲，关于他的新著《&lt;a href=&quot;http://b.xinshengdaxue.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新生——七年就是一辈子&lt;/a&gt;》。之前就拜读过李笑来老师的《把时间当做
    
    </summary>
    
    
      <category term="书" scheme="http://yoursite.com/tags/%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>CS50 简装学习笔记</title>
    <link href="http://yoursite.com/2016/08/24/CS50%E7%AE%80%E8%A3%85%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/08/24/CS50简装学习笔记/</id>
    <published>2016-08-23T16:00:00.000Z</published>
    <updated>2016-10-06T07:45:15.301Z</updated>
    
    <content type="html"><![CDATA[<p>最近在<a href="https://brucezp.github.io/2016/08/20/CS50%E7%AE%80%E8%A3%85%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/liqi.io" target="_blank" rel="external">利器</a>上看到推荐公开课，其中有提及哈佛大学的CS50。于是，在网易公开课上看了一节，感觉很好，又跳转到Youtube上看了最新的2015年的课程，决定开始学下去（希望不要打脸）。大家也可以通过<a href="https://cs50.harvard.edu/" target="_blank" rel="external">CS50的官网</a>找到课程的最新动态，包括下载公开课视频（Youtube上有字幕，英文的更舒服一些，但下载的视频似乎没有外挂的字幕）。我也将会在这篇博客中分享我的学习笔记。笔记应该不会是事无巨细的模式，只是提及一些要点，随后尽量补充，毕竟这个课程是很活跃的那种，理解要比笔记什么的来的更有用。</p>
<h3 id="Week0"><a href="#Week0" class="headerlink" title="Week0"></a>Week0</h3><p>algorithm–算法<br>pseduocode–伪代码</p>
<h5 id="编程中的重要元素"><a href="#编程中的重要元素" class="headerlink" title="编程中的重要元素"></a>编程中的重要元素</h5><ul>
<li>statements</li>
</ul>
<ul>
<li>conditions</li>
<li>loops</li>
</ul>
<h3 id="Week0-continued"><a href="#Week0-continued" class="headerlink" title="Week0, continued"></a>Week0, continued</h3><p>computational thinking</p>
<p><a href="https://scratch.mit.edu/" target="_blank" rel="external">Scratch</a> for basic programing</p>
<h5 id="编程中的重要元素-1"><a href="#编程中的重要元素-1" class="headerlink" title="编程中的重要元素"></a>编程中的重要元素</h5><ul>
<li>variables</li>
<li>arrays</li>
<li>functions (procedures)</li>
<li>Boolean expression (used with conditions)</li>
</ul>
<h3 id="Week1-Learn-Basics-of-C"><a href="#Week1-Learn-Basics-of-C" class="headerlink" title="Week1: Learn Basics of C"></a>Week1: Learn Basics of <strong>C</strong></h3><p>source code</p>
<p>compiler</p>
<p>object code (0 and 1)</p>
<p>int: interger 整数</p>
<p>string 字符串</p>
<p><strong>CS50 IDE:</strong> 很好的学习各种语言基础的环境，是放到C9上的，具体可以看一下C9的简单介绍：<a href="https://xuanwo.org/2014/08/07/Cloud9/" target="_blank" rel="external">强大且配置项丰富的在线IDE应用——Cloud9</a>。</p>
<p>可以通过注册C9账号来添加Harvard’s CS50来添加CS50 IDE.</p>
<h3 id="Week1-continued"><a href="#Week1-continued" class="headerlink" title="Week1, continued"></a>Week1, continued</h3><p>types of data: bool (only in CS50), char double, float, int, long long, string (only in CS50)….</p>
<p>format codes: %c, %i, %f, %lld, %s,</p>
<p>escape sequences: \n, \r,\t, \’, \”, \, \0\</p>
<p>functions: GetChar, GetDouble, GetFloat, GetInt…; printf()</p>
<p>condition: if { } else if { } else { }</p>
<p>boolean expressions: if (condition &amp;&amp; condition) { } // to express or, we use two vertical lines</p>
<p>switches:</p>
<p>loops: for (int i = 0; i &lt; 50; i++) { printf(“%i\n”, i) } ; while (condition) {// do this again and again}; do { // do this again and again} while (conditions);</p>
<p>variables: int counter; counter = 0; string name = GetString ( )</p>
<p>// we can also define functions</p>
<h4 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h4><p>functions: make codes more readable, //declared variables is effective in the nearest {}, the declare in front of the functions is to define the type of variable you want to return.</p>
<h4 id="Week2-continued"><a href="#Week2-continued" class="headerlink" title="Week2 continued"></a>Week2 continued</h4><p>/0用于表示一个结束是00000000</p>
<p>array: type name[n] start from 0</p>
<p>命令行，讲的不是特别清楚，又看了一下网上资料。</p>
<p><a href="http://wiki.jikexueyuan.com/project/c/c-command-line-arguments.html" target="_blank" rel="external">C 命令行参数</a></p>
<p><code>执行程序时，可以从命令行传值给 C 程序。这些值被称为**命令行参数**，它们对程序很重要，特别是当您想从外部控制程序，而不是在代码内对这些值进行硬编码时，就显得尤为重要了。</code></p>
<h4 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h4><p>The thinking mode of programing</p>
<p>How to sort:</p>
<p>bubble sort: n(n-1)/2 O(n2)</p>
<p>insertion sort:</p>
<p>upper amount of time: O(n^2) O(nlgn) O(n) O(lgn) O(1)</p>
<p>lower amount of time : Ω</p>
<p>and many many more on the CS50 website.</p>
<h4 id="Week3-continued"><a href="#Week3-continued" class="headerlink" title="Week3, continued"></a>Week3, continued</h4><p>Merger sort (O(nlogn))</p>
<p>bitwise operators: &amp; | ^ ~ &lt;&lt; &gt;&gt; //access individual bits in C</p>
<p>类似于布林运算： &amp;: and; |: or; ^: XOR // 1^1: 0; ~: not; &lt;&lt;: 1&lt;&lt;7=10000000</p>
<h4 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h4><p>recursive algorithm: function use itself</p>
<p>How to calculate n!: 1. return sum += m 2. return (m + sigma(m-1))</p>
<p>swap two var: a = a ^ b; b = a ^ b; a = a ^ b</p>
<p>stack</p>
<p>the function return the address of the returned element in memory</p>
<h4 id="Week4-continued"><a href="#Week4-continued" class="headerlink" title="Week4, continued"></a>Week4, continued</h4><p>signature of JPEG 255(0xff) 216(0xd8) 255(0xff)</p>
<p>struct: homemade type of data</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct</div><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">  	string name;</div><div class="line">  	string dorm;</div><div class="line">&#125;</div><div class="line">student</div></pre></td></tr></table></figure>
<p>use * to point to the memory</p>
<p>后面的笔记由于Typroa软件在Windows上的不稳定造成了丢失，我也只能忍痛默哀了。</p>
<p>后面的几章在继续讲解了C语言之后，又十分粗浅的提及了网络编程的相关内容（htmal，css, JS…)。总体来说这个课程还是很好的，十分推荐大家去学习。可能自己以后还会再继续跟着学习一遍，如果能够及时地跟随着课程的psets，并且将课外的一些讲解学习好，应该对C有个较为系统的了解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在&lt;a href=&quot;https://brucezp.github.io/2016/08/20/CS50%E7%AE%80%E8%A3%85%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/liqi.io&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>折腾Hexo：我填的坑</title>
    <link href="http://yoursite.com/2016/08/19/%E6%8A%98%E8%85%BEHexo%EF%BC%9A%E6%88%91%E5%A1%AB%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2016/08/19/折腾Hexo：我填的坑/</id>
    <published>2016-08-19T12:52:46.000Z</published>
    <updated>2016-08-30T05:16:32.701Z</updated>
    
    <content type="html"><![CDATA[<p>利用Hexo在Github page上建立个人博客系统已经不是一件多么fancy的事情了，但是对于伪Geek的我来说，还是经历了十分艰辛的路程，遇到了几个坑，现在此总结一下，希望能对大家有所帮助。</p>
<p>网上对搭建Hexo个人博客的方法介绍的已经十分详细了。google关键词<code>hexo github 博客</code>，你会发现很多详细教程，我也是借鉴着很多前人的方法来实现的，这里就不重复制造轮子了。网上比较好的资源有（其中也会存在一些错误表达的地方）：</p>
<ul>
<li><a href="https://www.freehao123.com/hexo-jianzhan/" target="_blank" rel="external">Hexo建站从入门到精通-Hexo博客本地环境配置,初始化,写作与部署</a> （<a href="https://n4l.pw/how-to-set-up-hexo-blog-on-linux.html" target="_blank" rel="external">在Linux服务器上搭建Hexo：OS X、Windows与Linux本地环境</a>）</li>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="external">史上最详细的Hexo博客搭建图文教程</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></li>
<li>…</li>
</ul>
<p>当然，这些博文尽管讲述的十分全面，但是仍然还是会存在一定的滞后性（相对于官方的更新）。所以<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a>上的文档也应该是你重要的参考。在开始之前，你也最好对什么是静态博客（包括优缺点）、什么是Git版本控制这样的问题有所了解，以保证看得懂以上教程。</p>
<h3 id="说说我所遇到的坑，以警后人："><a href="#说说我所遇到的坑，以警后人：" class="headerlink" title="说说我所遇到的坑，以警后人："></a>说说我所遇到的坑，以警后人：</h3><ul>
<li>配置Git SSH keys的时候不要输入密码，否则deploy的时候没有办法通过</li>
<li>当你更换了ico后重新deploy，而网站的ico没有变，那么请清除浏览器的缓存再试一次（针对不同主题都有不同的为网站添加ico的方法）</li>
<li>有些时候deploy后网站并没有变化，请稍等一下，会有一定的延迟（一般都很短）</li>
<li>我在添加about页面的时候，<code>/about</code>文件夹要放到Hexo目录中的<code>/source</code>文件夹下，而不是`/theme/very-simple/source下（针对于very-simple主题）</li>
<li>写新文章，一定要遵守规则，在文章最前面的place holder处添加信息的时候一定要注意结构，在冒号后面记得添加空格后再输入信息，否则文章无法deploy。</li>
</ul>
<p>希望这些经验能够对你有一些借鉴作用，如果有什么问题，欢迎留言交流，祝你成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用Hexo在Github page上建立个人博客系统已经不是一件多么fancy的事情了，但是对于伪Geek的我来说，还是经历了十分艰辛的路程，遇到了几个坑，现在此总结一下，希望能对大家有所帮助。&lt;/p&gt;
&lt;p&gt;网上对搭建Hexo个人博客的方法介绍的已经十分详细了。goog
    
    </summary>
    
    
      <category term="技" scheme="http://yoursite.com/tags/%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>我为什么还想要写博客</title>
    <link href="http://yoursite.com/2016/08/15/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E6%83%B3%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/08/15/我为什么还想要写博客/</id>
    <published>2016-08-15T13:57:20.000Z</published>
    <updated>2016-08-20T06:34:32.402Z</updated>
    
    <content type="html"><![CDATA[<p>随着微博、微信等多种信息传输媒介的不断发展，个人博客这样一个信息的载体逐渐地淡出了人们的视野。除了少数的著名个人博客（以技术博客为主）还维持着较高的人气，很多受众较小的博客站点已是门前冷落。随之产生的结果便是坚持博客写作的人似乎变得越来越少。尽管是在这样的背景下，我反而意识到博客写作对于我个人来说应该是一件有意义的事情。</p>
<h3 id="留下足迹"><a href="#留下足迹" class="headerlink" title="留下足迹"></a>留下足迹</h3><p>随着年龄的增长，我越发的感觉到自己作为人的渺小，一个不小心就可能在时代的潮流中悄然变老。我想，人活一世，最可怕的事情莫过于，当你老去，回首往事时发现，自己留在人生沙滩上的足迹都已被时间的潮汐抹平。我最不想问自己的问题就是：“我拿什么证明我来过？”但这确是一个很值得记在心中的问题。 </p>
<h3 id="为成长做笔记"><a href="#为成长做笔记" class="headerlink" title="为成长做笔记"></a>为成长做笔记</h3><p>这里所讲到的成长是一个十分宽泛的概念，应该包括心智的成熟，也包括专项技能的提升。确认个人在某一方面认知的提升，几乎可以完全取决于其是否能够完整地、逻辑清晰地、易于理解地对这一方面的知识进行教育式的讲述。我也就是想通过博客的方式记录下自己成长中的细节，把知识用自己的方式再一次传达出去。同时，也希望以这样的方式来给我越发不灵光的记忆力做个备份。</p>
<h3 id="服务与交流"><a href="#服务与交流" class="headerlink" title="服务与交流"></a>服务与交流</h3><p>目前我学习到太多的东西是得益于互联网的分享精神，我也希望自己能够在这个神奇的联通世界中扮演一个贡献者的角色。对于这个方面我还是不太自信，不过希望可以做的越来越好。当然，想要联通，就必然要交流，我希望通过博客能遇见更多的同道中人，好友遍天下可谓人生之大幸也。</p>
<h3 id="开垦自留地"><a href="#开垦自留地" class="headerlink" title="开垦自留地"></a>开垦自留地</h3><p>希望这里能够成为一片自留地，让我能够在上面用力地开荒，随意地播种，不懈地耕耘，幸福地收获。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着微博、微信等多种信息传输媒介的不断发展，个人博客这样一个信息的载体逐渐地淡出了人们的视野。除了少数的著名个人博客（以技术博客为主）还维持着较高的人气，很多受众较小的博客站点已是门前冷落。随之产生的结果便是坚持博客写作的人似乎变得越来越少。尽管是在这样的背景下，我反而意识
    
    </summary>
    
    
      <category term="论" scheme="http://yoursite.com/tags/%E8%AE%BA/"/>
    
  </entry>
  
</feed>
